#include <Utility.h>
#include <Common.h>
#include <Impl/Graphic.h>
#include <d3d9.h>
#include <d3dx9.h>

#pragma comment(lib, "d3d9.lib")
#pragma comment(lib, "d3dx9.lib")

struct Vertex
{
	D3DXVECTOR3 pos;
	float rhw;
	DWORD dif;
};

static const DWORD FVF = D3DFVF_XYZRHW | D3DFVF_DIFFUSE;

unsigned int NekLib::GetColor(int red, int green, int blue)
{
	if(red < 0)
	{red = 0;}
	if(255 < red)
	{red = 255;}
	if(green < 0)
	{green = 0;}
	if(255 < green)
	{green = 255;}
	if(blue < 0)
	{blue = 0;}
	if(255 < blue)
	{blue = 255;}

	return ((0xff << 24) | (red << 16) | (green << 8) | (blue));
}

bool NekLib::DrawPoint(float x, float y, unsigned int color)
{
	static Vertex v[1];
	LPDIRECT3DVERTEXBUFFER9 vb;
	LPDIRECT3DDEVICE9 d = Graphic::Get()->Device().Get();
	v[0].rhw = 1.0f;
	v[0].pos = D3DXVECTOR3(x, y, 0.0f);
	v[0].dif = D3DXCOLOR(color);

	d->CreateVertexBuffer
		(sizeof(Vertex), D3DUSAGE_WRITEONLY,
		FVF, D3DPOOL_MANAGED,
		&vb, nullptr
		);

	d->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);
	d->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);
	d->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_DIFFUSE);

	void* pv;
	vb->Lock(0U, sizeof(Vertex), &pv, 0U);

	memcpy(pv, &v, sizeof(Vertex));

	vb->Unlock();

	d->SetStreamSource(0U, vb, 0U, sizeof(Vertex));
	d->SetFVF(FVF);
	d->DrawPrimitive(D3DPT_POINTLIST, 0U, 1U);

	d->SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW);
	Release(vb);
	pv = nullptr;

	return true;
}

bool NekLib::DrawLine(float x1, float y1, float x2, float y2, unsigned int color)
{
	static Vertex v[2];
	LPDIRECT3DVERTEXBUFFER9 vb;
	LPDIRECT3DDEVICE9 d = Graphic::Get()->Device().Get();
	v[0].pos = D3DXVECTOR3(x1, y1, 0.0f);
	v[1].pos = D3DXVECTOR3(x2, y2, 0.0f);
	v[0].dif = v[1].dif = D3DXCOLOR(color);
	v[0].rhw = v[1].rhw = 1.0f;

	d->CreateVertexBuffer
		(2 * sizeof(Vertex), D3DUSAGE_WRITEONLY,
		FVF, D3DPOOL_MANAGED,
		&vb, nullptr
		);

	d->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);
	d->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);
	d->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_DIFFUSE);
	
	void* pv;
	vb->Lock(0U, sizeof(Vertex) * 2, &pv, 0U);

	memcpy(pv, v, sizeof(Vertex) * 2);

	vb->Unlock();

	d->SetStreamSource(0U, vb, 0U, sizeof(Vertex));
	d->SetFVF(FVF);
	d->DrawPrimitive(D3DPT_LINELIST, 0U, 1U);

	d->SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW);
	Release(vb);
	pv = nullptr;

	return true;
}

bool NekLib::DrawBox(float x, float y, float width, float height, unsigned int color, bool fillFlag)
{
	static Vertex v[4];
	LPDIRECT3DVERTEXBUFFER9 vb;
	LPDIRECT3DDEVICE9 d = Graphic::Get()->Device().Get();
	v[0].pos = D3DXVECTOR3(x, y, 0.0f);
	v[1].pos = D3DXVECTOR3(x+width, y, 0.0f);
	v[2].pos = D3DXVECTOR3(x, y+height, 0.0f);
	v[3].pos = D3DXVECTOR3(x+width, y+height, 0.0f);

	v[0].dif = v[1].dif = v[2].dif = v[3].dif = D3DXCOLOR(color);
	v[0].rhw = v[1].rhw = v[2].rhw = v[3].rhw = 1.0f;

	d->CreateVertexBuffer
		(4 * sizeof(Vertex), D3DUSAGE_WRITEONLY,
		FVF, D3DPOOL_MANAGED,
		&vb, nullptr
		);

	d->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);
	d->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);
	d->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_DIFFUSE);
	
	void* pv;
	vb->Lock(0U, sizeof(Vertex) * 4, &pv, 0U);

	memcpy(pv, v, sizeof(Vertex) * 4);

	vb->Unlock();

	d->SetStreamSource(0U, vb, 0U, sizeof(Vertex));
	d->SetFVF(FVF);
	if(fillFlag)
	{
		d->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0U, 2U);
	}
	else
	{
		DrawLine(v[0].pos.x, v[0].pos.y, v[1].pos.x, v[1].pos.y, color);
		DrawLine(v[0].pos.x, v[0].pos.y, v[2].pos.x, v[2].pos.y, color);
		DrawLine(v[1].pos.x, v[1].pos.y, v[3].pos.x, v[3].pos.y, color);
		DrawLine(v[2].pos.x, v[2].pos.y, v[3].pos.x, v[3].pos.y, color);
	}
	d->SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW);
	Release(vb);
	pv = nullptr;

	return true;
}

bool NekLib::DrawTriangle(float x1, float y1, float x2, float y2, float x3, float y3, unsigned int color, bool fillFlag)
{
	static Vertex v[3];
	LPDIRECT3DVERTEXBUFFER9 vb;
	LPDIRECT3DDEVICE9 d = Graphic::Get()->Device().Get();
	v[0].pos = D3DXVECTOR3(x1, y1, 0.0f);
	v[1].pos = D3DXVECTOR3(x2, y2, 0.0f);
	v[2].pos = D3DXVECTOR3(x3, y3, 0.0f);

	v[0].dif = v[1].dif = v[2].dif = D3DXCOLOR(color);
	v[0].rhw = v[1].rhw = v[2].rhw = 1.0f;

	d->CreateVertexBuffer
		(3 * sizeof(Vertex), D3DUSAGE_WRITEONLY,
		FVF, D3DPOOL_MANAGED,
		&vb, nullptr
		);

	d->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);
	d->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);
	d->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_DIFFUSE);
	
	void* pv;
	vb->Lock(0U, sizeof(Vertex) * 3, &pv, 0U);

	memcpy(pv, v, sizeof(Vertex) * 3);

	vb->Unlock();

	d->SetStreamSource(0U, vb, 0U, sizeof(Vertex));
	d->SetFVF(FVF);
	if(fillFlag)
	{
		d->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0U, 1U);
	}
	else
	{
		DrawLine(v[0].pos.x, v[0].pos.y, v[1].pos.x, v[1].pos.y, color);
		DrawLine(v[0].pos.x, v[0].pos.y, v[2].pos.x, v[2].pos.y, color);
		DrawLine(v[1].pos.x, v[1].pos.y, v[2].pos.x, v[2].pos.y, color);
	}
	d->SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW);
	Release(vb);
	pv = nullptr;

	return true;
}